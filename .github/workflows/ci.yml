name: CI

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25.1'
    
    - name: Install dependencies
      run: go mod download
    
    - name: Run tests
      run: go test ./...
    
    # - name: Run linter
    #   uses: golangci/golangci-lint-action@v8
    #   with:
    #     version: latest
    #     args: --timeout=5m

  build:
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - os: windows-latest
            goarch: arm64
          - os: windows-latest
            goos: linux
          - os: windows-latest
            goos: darwin
          - os: macos-latest
            goos: linux
          - os: macos-latest
            goos: windows
          - os: ubuntu-latest
            goos: windows
          - os: ubuntu-latest
            goos: darwin
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25.1'
    
    - name: Build
      run: |
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o gofred-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} .
      shell: bash
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gofred-${{ matrix.goos }}-${{ matrix.goarch }}
        path: gofred-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}

  release:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Debug artifacts
      run: |
        echo "Current directory contents:"
        ls -la
        echo "Looking for gofred artifacts:"
        find . -name "gofred-*" -type f
        echo "Artifact directories:"
        find . -name "gofred-*" -type d
    
    - name: Create release archives
      run: |
        mkdir -p dist
        echo "Processing artifacts..."
        
        # Process files directly in current directory
        for artifact in gofred-*; do
          if [ -f "$artifact" ]; then
            echo "Found file: $artifact"
            tar -czf "dist/${artifact}.tar.gz" "$artifact"
            echo "Created: dist/${artifact}.tar.gz"
          fi
        done
        
        # Process artifacts in subdirectories (downloaded artifacts)
        for dir in gofred-*; do
          if [ -d "$dir" ]; then
            echo "Found directory: $dir"
            # Find the binary inside the directory
            binary=$(find "$dir" -name "gofred-*" -type f | head -1)
            if [ -n "$binary" ]; then
              echo "Found binary: $binary"
              tar -czf "dist/${dir}.tar.gz" -C "$dir" .
              echo "Created: dist/${dir}.tar.gz"
            fi
          fi
        done
        
        echo "Final dist contents:"
        ls -la dist/
    
    - name: Check for release files
      run: |
        if [ ! -d "dist" ] || [ -z "$(ls -A dist/ 2>/dev/null)" ]; then
          echo "No release files found in dist/"
          exit 1
        fi
        echo "Release files found:"
        ls -la dist/
    
    - name: Check GitHub permissions
      run: |
        echo "GitHub token permissions:"
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/repos/${{ github.repository }}/releases
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*.tar.gz
        generate_release_notes: true
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        fail_on_unmatched_files: true
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
