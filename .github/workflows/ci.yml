name: CI

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25.1'
    
    - name: Install dependencies
      run: go mod download
    
    - name: Run tests
      run: go test ./...
    
    # - name: Run linter
    #   uses: golangci/golangci-lint-action@v8
    #   with:
    #     version: latest
    #     args: --timeout=5m

  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25.1'
    
    - name: Build for all platforms
      run: |
        # Create dist directory
        mkdir -p dist
        
        # Build for Linux AMD64
        GOOS=linux GOARCH=amd64 go build -o dist/gofred-linux-amd64 .
        
        # Build for Linux ARM64
        GOOS=linux GOARCH=arm64 go build -o dist/gofred-linux-arm64 .
        
        # Build for Windows AMD64
        GOOS=windows GOARCH=amd64 go build -o dist/gofred-windows-amd64.exe .
        
        # Build for Windows ARM64
        GOOS=windows GOARCH=arm64 go build -o dist/gofred-windows-arm64.exe .
        
        # Build for macOS AMD64
        GOOS=darwin GOARCH=amd64 go build -o dist/gofred-darwin-amd64 .
        
        # Build for macOS ARM64
        GOOS=darwin GOARCH=arm64 go build -o dist/gofred-darwin-arm64 .
        
        # List all built binaries
        ls -la dist/
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  release:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Debug artifacts
      run: |
        echo "Current directory contents:"
        ls -la
        echo "Looking for gofred artifacts:"
        find . -name "gofred-*" -type f
    
    - name: Create release archives
      run: |
        echo "Processing artifacts..."
        echo "Current directory contents:"
        ls -la
        
        # Check if we have a dist directory (from build job)
        if [ -d "dist" ]; then
          echo "Found dist directory with binaries:"
          ls -la dist/
          
          # Create tar.gz archives for each binary in the dist directory
          for binary in dist/gofred-*; do
            if [ -f "$binary" ]; then
              filename=$(basename "$binary")
              echo "Creating archive for: $filename"
              tar -czf "dist/${filename}.tar.gz" -C dist "$filename"
              echo "Created: dist/${filename}.tar.gz"
              rm "$binary"
            fi
          done
        
          echo "Final dist files:"
          ls -la dist/
          find . -name "gofred-*.tar.gz" -type f
        fi
    
    - name: Check for release files
      run: |
        # Check for tar.gz files in dist directory
        if [ ! -d "dist" ] || [ -z "$(ls -A dist/ 2>/dev/null)" ]; then
          echo "No release files found in dist/"
          exit 1
        fi
        echo "Release files found:"
        ls -la dist/
    
    - name: Check GitHub permissions
      run: |
        echo "GitHub token permissions:"
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/repos/${{ github.repository }}/releases
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*.tar.gz
        generate_release_notes: true
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        fail_on_unmatched_files: true
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
